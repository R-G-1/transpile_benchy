"""QiskitInterface class.

This module contains the QiskitInterface class, which is a subclass of
SubmoduleInterface. It is intended to be used for submodules that are
written in Qiskit, and have a set of functions which return
QuantumCircuits.
"""
from typing import Callable, Dict, List, Type

from transpile_benchy.interfaces.abc_interface import SubmoduleInterface


class QiskitFunctionInterface(SubmoduleInterface):
    """Subclass of QiskitInterface with QuantumFunctionFactory integrated.

    This class encapsulates the process of generating Qiskit functions
    of a given type (e.g., QFT or QuantumVolume) for a specified set of
    qubit counts. The QuantumFunctionFactory nested class handles the
    generation of these functions.

    Example usage:

    num_qubits = [8, 12, 16, 20, 24, 28, 32, 36]

    qiskit_functions_qft = QiskitFunctionInterface(QFT, num_qubits)

    qiskit_functions_qv = QiskitFunctionInterface(QuantumVolume, num_qubits)
    """

    class QuantumFunctionFactory:
        """Factory for creating quantum functions.

        This factory generates Qiskit functions of a given type for a
        specific list of qubit counts. The generated functions can then
        be retrieved as a list through the generate_functions method.
        """

        def __init__(self, function_type: Type[Callable], num_qubits: List[int]):
            """Initialize QuantumFunctionFactory."""
            self.function_type = function_type
            self.num_qubits = num_qubits

        def generate_functions(self) -> Dict[str, Callable]:
            """Generate a dictionary of quantum functions."""
            return {
                # f"{self.function_type.__name__.lower()}_{n}": self._create_function(n)
                f"{self.function_type.__name__}": self._create_function(n)
                for n in self.num_qubits
            }

        def _create_function(self, num_qubits: int) -> Callable:
            """Create a quantum function given number of qubits."""
            func = self.function_type(num_qubits)
            # func.name = f"{self.function_type.__name__.lower()}_{num_qubits}"
            func.name = f"{self.function_type.__name__}"
            return func

    def __init__(self, function_type: Type[Callable], num_qubits: List[int]) -> None:
        """Initialize QiskitFunctionInterface."""
        self.function_factory = self.QuantumFunctionFactory(function_type, num_qubits)
        self.raw_circuits = self._get_quantum_circuits()

    def _get_quantum_circuits(self) -> List[Callable]:
        """Return functions generated by the QuantumFunctionFactory."""
        return list(self.function_factory.generate_functions().values())
